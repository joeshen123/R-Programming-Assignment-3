boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
swirl()
remainder(4, div =2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
?sds
?Sds
evaluate(sd,c(1.4, 3.6, 7.9, 8.8) )
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
SUBMIT()
submit()
telegram("I love Programming")
submit()
?eclipse
?list
submit()
mad_libs(NYC, happy, test)
mad_libs(NYC, happy, test)
mad_libs('NYC', 'happy', 'test')
submit()
mad_libs('NYC', 'happy', 'test')
mad_libs('NYC', 'happy', 'test')
mad_libs('NYC', 'happy', 'test')
?string
submit()
'I' %p% 'love' %p% "R!"
mad_libs('NYC', 'aaa', 'bbb')
submit()
mad_libs('NYC', 'aaa', 'bbb')
submit()
mad_libs('NYC', 'aaa', 'bbb')
submit()
mad_libs('NYC', 'aaa', 'bbb')
subnit()
subnit()
submit()
mad_libs('NYC', 'aaa', 'bbb')
swirl()
Sys.Date
Sys.Date()
mean(c(2,4,5))
submit()
boring_function(('My first function!'))
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
?ellipse_func()
submit()
telegram("I","love","programming")
submit()
mad_libs(place = 'NYC', adjective = 'happy', noun = 'dog')
submit()
'I' %p% 'love' %p% "R!"
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- aspply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
0
quit()
swirl()
library(swirl())
swirl()
0\
quit()
library(swirl())
swirl()
1:20
pi:10
15:1
?:
?':'
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep((0,1,2), each = 10)
rep((0,1,2), each = 10)
rep(c(0,1,2), each = 10)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique())
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flagsm unique)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?debug
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, 0.5)
seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
install_course('Data Analysis')
?<<-
?"<<-"
matrix()
matrix(1:4, 2:2)
matrix(1:8)
matrix(1:8,4,4)
numeric()
numeric(0:3)
numeric(3)
?numeric
numeric(c(2,3,4))
numeric(4,c(2,3,4))
is.numeric(c(2,3,4))
as.numeric(c(2,3,4))
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
a <- makeCacheMatrix()
a
makeCacheMatrix(matrix(1:4,2,2))
a <- makeCacheMatrix(matrix(1:4,2,2))
a$set()
a$set
a$get()
a <- makeCacheMatrix()
a$set(matrix(1:8,2,6))
a$set(matrix(1:8,4,4))
a$get()
a$getinverse()
cacheSolve(a)
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
cacheSolve(a,...)
a
a$get()
cacheSolve(a)
is.null(a$getinverse())
is.null(a$getinverse)
a$getinverse
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
a$getinverse()
a$getinverse
cacheSolve(a)
cacheSolve(a)
a
cacheSolve(a)
cacheSolve(a)
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
a$get()
solve(a$get())
a$set(matrix(1:4, 2, 2))
s$get()
a$get()
solve(a$get())
cacheSolve(a)
solve(matrix(1:9, 3,3))
solve(matrix(1:6, 3,3)
q
matrix(1:6, 3, 3)
matrix(1:9, 3,3)
solve(matrix(1:9, 3,3))
det(matrix(1:9, 3,3))
a$getinverse()
a$set(matrix(c(2, 2, 1, 4), 2, 2))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
swirl()
library(swirl)
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
13
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm (10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
getwd()
data <- read.csv("outcome-of-care-measures.csv")
getwd()
setwd()
setwd("~/Documents/GitHub/R-Programming-Assignment-3/RProgAssignment3-data")
setwd("")
outcome <- read.csv("outcome-of-care-measures.csv")
head(outcome)
names(outcome)
head(data[order(outcome[,2])])
order(outcome[,2])
head(outcome[order(outcome[,2]),])
class(outcome[,2])
outcome[,2]
?factor
levels(outcome[,2])
class(levels(outcome[,2]))
levels(outcome$State)
outcome[,11]
complete.cases(outcome[,11])
outcome[complete.cases(outcome[,11]),]
outcome[complete.cases(outcome[,11]),11]
complete.cases(as.numeric(outcome[,11]))
complete.cases(as.character(outcome[,11]))
class(levels(outcome[,1])[outcome[,1]])
as.character(levels(outcome[,1])[outcome[,1]])
names(outcome)
outcome[1,2]
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best('AK',"heart attack")
outcome[,2]
outcome$State
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK","heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK","heart attack")
grouping <- split(outcome, outcome$State)
class(grouping$AK)
class(grouping$AK$Hospital.Name)
class(as.character(grouping$AK$Hospital.Name))
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK","heart attack")
best("AK","heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK","heart attack")
print(best("AK","heart attack"))
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK","heart attack")
head(grouping)
str(grouping)
summary(grouping)
str(grouping$AK)
order[grouping$AK[,11]]
order(grouping$AK[,11])
grouping$AK$Hospital.Name[order(grouping$AK[,11]),]
grouping$AK$Hospital.Name[order(grouping$AK[,11],),]
grouping$AK$Hospital.Name[order(grouping$AK$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),]
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
grouping$AK$Hospital.Name[order(grouping$AK$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.),]
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart attack")
class(best("TX", "heart attack"))
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart attack")
best("AK", "heart attack")
best("TX", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "sdf")
best("AK", "heaet attack")
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("AK", "heart attack")
names(outcome)
?which
order(outcome$Hospital.Name)
outcome[order(outcome$Hospital.Name),][,2]
outcome[order(outcome[,11],outcome[,2]),][,2]
outcome[order(outcome[,11],outcome[,2]),][1,2]
outcome[,11]
levels(outcome[,2])
outcome[order(outcome[,11],outcome[,2]),][,11]
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
colnames(outcome)
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
library(swirl)
swirl()
x - c44, NA, 5, NA)
x - c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
X * 3
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(x(y,z), 100)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
inf - inf
Inf - Inf
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
best("MD", "pneumonia")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "pneumonia")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "pneumonia")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "pneumonia")
source('~/.active-rstudio-document')
best("TX", "heart failure")
source('~/.active-rstudio-document')
best("TX", "heart failure")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart failure")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart failure")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart failure")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
as.numeric(state_data[,colnum])
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
as.numeric(state_data[,colnum])
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart attack")
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
c(1,2,3,4)
as.numeric(c(1,2,3,4))
as.factor(1,2,3,4)
as.factor(c(1,2,3,4))
as.numeric(as.factor(c(1,2,3,4)))
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
?order
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "heart attack")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "pneumonia")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "pneumonia")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "pneumonia")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("MD", "pneumonia")
best("MD", "heart attack")
best("TX", "heart failure")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart failure")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart failure")
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
?grep
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
best("TX", "heart failure")
?order
source('~/Documents/GitHub/R-Programming-Assignment-3/best.R')
