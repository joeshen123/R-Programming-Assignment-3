info()
swirl()
quit
x <- c(44, NA, 5, NA)
x * 3
getcwd()
getwd()
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
y <- rnorm(1000)
z <- rep(NA, 1000)
ma_data <- sample(c(y, z), 100)
info(sample)
info(sample())
info()
?sample()
?c
my_data <- sample(c(y,z), 100)
my_na <- my_data.na()
?.na()
?na()
my_na <- my_data.na()
my_na <- my_data.na
?na
??na
?.na()
?na()
my_data.na()
my_na <- na(my_data)
?is.na()
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0\0
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3,5,7)
x(c(3,5,7))
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c('foo', 'bar')]
my_vector <- c(1 : 20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
vector <-c('Bill','Gina','Kelly','Sean')
patients <-c('Bill','Gina','Kelly','Sean')
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
swirl()
remainder(4, div =2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
?sds
?Sds
evaluate(sd,c(1.4, 3.6, 7.9, 8.8) )
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
SUBMIT()
submit()
telegram("I love Programming")
submit()
?eclipse
?list
submit()
mad_libs(NYC, happy, test)
mad_libs(NYC, happy, test)
mad_libs('NYC', 'happy', 'test')
submit()
mad_libs('NYC', 'happy', 'test')
mad_libs('NYC', 'happy', 'test')
mad_libs('NYC', 'happy', 'test')
?string
submit()
'I' %p% 'love' %p% "R!"
mad_libs('NYC', 'aaa', 'bbb')
submit()
mad_libs('NYC', 'aaa', 'bbb')
submit()
mad_libs('NYC', 'aaa', 'bbb')
submit()
mad_libs('NYC', 'aaa', 'bbb')
subnit()
subnit()
submit()
mad_libs('NYC', 'aaa', 'bbb')
swirl()
Sys.Date
Sys.Date()
mean(c(2,4,5))
submit()
boring_function(('My first function!'))
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
?ellipse_func()
submit()
telegram("I","love","programming")
submit()
mad_libs(place = 'NYC', adjective = 'happy', noun = 'dog')
submit()
'I' %p% 'love' %p% "R!"
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- aspply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
0
quit()
swirl()
library(swirl())
swirl()
0\
quit()
library(swirl())
swirl()
1:20
pi:10
15:1
?:
?':'
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep((0,1,2), each = 10)
rep((0,1,2), each = 10)
rep(c(0,1,2), each = 10)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique())
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flagsm unique)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?debug
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, 0.5)
seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
install_course('Data Analysis')
?<<-
?"<<-"
matrix()
matrix(1:4, 2:2)
matrix(1:8)
matrix(1:8,4,4)
numeric()
numeric(0:3)
numeric(3)
?numeric
numeric(c(2,3,4))
numeric(4,c(2,3,4))
is.numeric(c(2,3,4))
as.numeric(c(2,3,4))
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
a <- makeCacheMatrix()
a
makeCacheMatrix(matrix(1:4,2,2))
a <- makeCacheMatrix(matrix(1:4,2,2))
a$set()
a$set
a$get()
a <- makeCacheMatrix()
a$set(matrix(1:8,2,6))
a$set(matrix(1:8,4,4))
a$get()
a$getinverse()
cacheSolve(a)
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
cacheSolve(a,...)
a
a$get()
cacheSolve(a)
is.null(a$getinverse())
is.null(a$getinverse)
a$getinverse
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
a$getinverse()
a$getinverse
cacheSolve(a)
cacheSolve(a)
a
cacheSolve(a)
cacheSolve(a)
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
a$get()
solve(a$get())
a$set(matrix(1:4, 2, 2))
s$get()
a$get()
solve(a$get())
cacheSolve(a)
solve(matrix(1:9, 3,3))
solve(matrix(1:6, 3,3)
q
matrix(1:6, 3, 3)
matrix(1:9, 3,3)
solve(matrix(1:9, 3,3))
det(matrix(1:9, 3,3))
a$getinverse()
a$set(matrix(c(2, 2, 1, 4), 2, 2))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R')
swirl()
library(swirl)
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
13
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm (10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
str(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,  ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
ploT(cars, pch = 2)
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
head(mtcars)
str(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?rpois
set.seed(1)
rpois(5,2)
?dnorm
pwd()
wd()
getwd()
setwd("Documents/GitHub/R-Programming-Assignment-3")
getwd()
setwd()
setwd("RProgAssignment3-data")
getwd()
ls()
dir()
list.files()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
str(outcome)
head(outcome)
summary(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
class(outcome)
outcom[,2]
outcome[,2]
names(outcome)
group_by(outcome$State)
library(dplyr)
group_by(outcome$State)
group_by(outcome$Hospital.Name, outcome$State)
outcome <- read.csv("outcome-of-care-measures.csv")
group_by(outcome$Hospital.Name, outcome$State)
outcome$State
group(outcome$State)
?group_by
outcome %>% group_by(coutcome$State)
outcome$Hospital.Name %>% group_by(outcome$State)
outcome%>% group_by(outcome$State)
group_by(outcome, outcome$State)
group_by(outcome$Hospital.Name, outcome$State)
a = data(mtcars)
a
head(a)
a <- data("mtcars")
a
head(a)
a <- data(mtcars)
a
str(a)
summary(outcome)
str(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
str(outcome)
group_by(outcome$Hospital.Name, outcome$State)
group_by(outcome$State, outcome$Hospital.Name)
subset(outcome$Hospital.Name, outcome$State)
split(outcome$Hospital.Name, outcome$State)
source('~/Documents/GitHub/R-Programming-Assignment-3/R Programming Assignment 3.R')
best("aa", "heart attack")
best("aa", "hearts attack")
split(outcome, outcome$state)
outcome
split(outcome, outcome$State)
class(split(outcome, outcome$State))
grepl("sxs", "s")
grepl("sxs", "sxsfsdfdsf")
names(outcome)
sapply(names(outcome), grepl, "death")
sapply(names(outcome), grepl, "Death")
split(outcome, outcome$State)
grouping <- split(outcome, outcome$State)
grouping$AK
grouping$AK$Comparison.to.U.S..Rate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
grouping$AK$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
grouping$AK[c(Hospital.Name,Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)]
grouping$AK[c(Hospital.Name,Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia),]
grouping$AK$Hospital.Name
subset(grouping$AK, c(Hospital.Name,Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia) )
subset(grouping$AK, select = c(Hospital.Name,Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia) )
str(subset(grouping$AK, select = c(Hospital.Name,Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia) ))
